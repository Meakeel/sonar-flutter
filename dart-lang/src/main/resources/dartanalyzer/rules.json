[
    {
        "key": "abi_specific_integer_invalid",
        "name": "Abi specific integer invalid",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a class that extends\nAbiSpecificInteger doesn\u2019t meet all of the following requirements:\n @see https://dart.dev/tools/diagnostic-messages#abi_specific_integer_invalid",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "abstract_field_initializer",
        "name": "Abstract field initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field that has the abstract\nmodifier also has an initializer.\n @see https://dart.dev/tools/diagnostic-messages#abstract_field_initializer",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "argument_type_not_assignable_to_error_handler",
        "name": "Argument type not assignable to error handler",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an invocation of\nFuture.catchError has an argument that is a function whose parameters\naren\u2019t compatible with the arguments that will be passed to the function\nwhen it\u2019s invoked. The static type of the first argument to catchError\nis just Function, even though the function that is passed in is expected\nto have either a single parameter of type Object or two parameters of\ntype Object and StackTrace.\n @see https://dart.dev/tools/diagnostic-messages#argument_type_not_assignable_to_error_handler",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "body_might_complete_normally",
        "name": "Body might complete normally",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a method or function has a\nreturn type that\u2019s potentially non-nullable but would implicitly return\nnull if control reached the end of the function.\n @see https://dart.dev/tools/diagnostic-messages#body_might_complete_normally",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "conflicting_constructor_and_static_member",
        "name": "Conflicting constructor and static member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a named constructor and either a\nstatic method or static field have the same name. Both are accessed using\nthe name of the class, so having the same name makes the reference\nambiguous.\n @see https://dart.dev/tools/diagnostic-messages#conflicting_constructor_and_static_member",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "const_map_key_not_primitive_equality",
        "name": "Const map key not primitive equality",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the class of object used as a\nkey in a constant map literal implements either the == operator, the\ngetter hashCode, or both. The implementation of constant maps uses both\nthe == operator and the hashCode getter, so any implementation other\nthan the ones inherited from Object requires executing arbitrary code at\ncompile time, which isn\u2019t supported.\n @see https://dart.dev/tools/diagnostic-messages#const_map_key_not_primitive_equality",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "dead_null_aware_expression",
        "name": "Dead null aware expression",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic in two cases.The first is when the left operand of an ?? operator can\u2019t be null.\nThe right operand is only evaluated if the left operand has the value\nnull, and because the left operand can\u2019t be null, the right operand is\nnever evaluated.The second is when the left-hand side of an assignment using the ??=\noperator can\u2019t be null. The right-hand side is only evaluated if the\nleft-hand side has the value null, and because the left-hand side can\u2019t\nbe null, the right-hand side is never evaluated.\n @see https://dart.dev/tools/diagnostic-messages#dead_null_aware_expression",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "deprecated_new_in_comment_reference",
        "name": "Deprecated new in comment reference",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a comment reference (the name\nof a declaration enclosed in square brackets in a documentation comment)\nuses the keyword new to refer to a constructor. This form is deprecated.\n @see https://dart.dev/tools/diagnostic-messages#deprecated_new_in_comment_reference",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "duplicate_constructor",
        "name": "Duplicate constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a class declares more than one\nunnamed constructor or when it declares more than one constructor with the\nsame name.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_constructor",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "duplicate_field_name",
        "name": "Duplicate field name",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a record literal or a\nrecord type annotation contains a field whose name is the same as a\npreviously declared field in the same literal or type.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_field_name",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "duplicate_ignore",
        "name": "Duplicate ignore",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a diagnostic name appears in an\nignore comment, but the diagnostic is already being ignored, either\nbecause it\u2019s already included in the same ignore comment or because it\nappears in an ignore-in-file comment.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_ignore",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "duplicate_pattern_field",
        "name": "Duplicate pattern field",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a record pattern matches the\nsame field more than once, or when an object pattern matches the same\ngetter more than once.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_pattern_field",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "external_with_initializer",
        "name": "External with initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field or variable marked with\nthe keyword external has an initializer, or when an external field is\ninitialized in a constructor.\n @see https://dart.dev/tools/diagnostic-messages#external_with_initializer",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "field_initializer_redirecting_constructor",
        "name": "Field initializer redirecting constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a redirecting constructor\ninitializes a field in the object. This isn\u2019t allowed because the instance\nthat has the field hasn\u2019t been created at the point at which it should be\ninitialized.\n @see https://dart.dev/tools/diagnostic-messages#field_initializer_redirecting_constructor",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "illegal_concrete_enum_member",
        "name": "Illegal concrete enum member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either an enum declaration, a\nclass that implements Enum, or a mixin with a superclass constraint of\nEnum, declares or inherits a concrete instance member named either\nindex, hashCode, or ==.\n @see https://dart.dev/tools/diagnostic-messages#illegal_concrete_enum_member",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "illegal_enum_values",
        "name": "Illegal enum values",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a class that implements\nEnum or a mixin with a superclass constraint of Enum has an instance\nmember named values.\n @see https://dart.dev/tools/diagnostic-messages#illegal_enum_values",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "implicit_super_initializer_missing_arguments",
        "name": "Implicit super initializer missing arguments",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a constructor implicitly\ninvokes the unnamed constructor from the superclass, the unnamed\nconstructor of the superclass has a required parameter, and there\u2019s no\nsuper parameter corresponding to the required parameter.\n @see https://dart.dev/tools/diagnostic-messages#implicit_super_initializer_missing_arguments",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "inconsistent_pattern_variable_logical_or",
        "name": "Inconsistent pattern variable logical or",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a pattern variable that is\ndeclared on all branches of a logical-or pattern doesn\u2019t have the same\ntype on every branch. It is also produced when the variable has a\ndifferent finality on different branches. A pattern variable declared on\nmultiple branches of a logical-or pattern is required to have the same\ntype and finality in each branch, so that the type and finality of the\nvariable can be known in code that\u2019s guarded by the logical-or pattern.\n @see https://dart.dev/tools/diagnostic-messages#inconsistent_pattern_variable_logical_or",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_annotation",
        "name": "Invalid annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an annotation is found that is\nusing something that is neither a variable marked as const or the\ninvocation of a const constructor.Getters can\u2019t be used as annotations.\n @see https://dart.dev/tools/diagnostic-messages#invalid_annotation",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_extension_argument_count",
        "name": "Invalid extension argument count",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override doesn\u2019t\nhave exactly one argument. The argument is the expression used to compute\nthe value of this within the extension method, so there must be one\nargument.\n @see https://dart.dev/tools/diagnostic-messages#invalid_extension_argument_count",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_field_name",
        "name": "Invalid field name",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a record literal or a\nrecord type annotation has a field whose name is invalid. The name is\ninvalid if it is:\n @see https://dart.dev/tools/diagnostic-messages#invalid_field_name",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_literal_annotation",
        "name": "Invalid literal annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the [literal][[meta-literal]]\nannotation is applied to anything other than a const constructor.\n @see https://dart.dev/tools/diagnostic-messages#invalid_literal_annotation",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_non_virtual_annotation",
        "name": "Invalid non virtual annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the nonVirtual annotation is\nfound on a declaration other than a member of a class, mixin, or enum, or\nif the member isn\u2019t a concrete instance member.\n @see https://dart.dev/tools/diagnostic-messages#invalid_non_virtual_annotation",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_null_aware_operator",
        "name": "Invalid null aware operator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a null-aware operator (?.,\n?.., ?[, ?..[, or ...?) is used on a receiver that\u2019s known to be\nnon-nullable.\n @see https://dart.dev/tools/diagnostic-messages#invalid_null_aware_operator",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_pattern_variable_in_shared_case_scope",
        "name": "Invalid pattern variable in shared case scope",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when multiple case clauses in a\nswitch statement share a body, and at least one of them declares a\nvariable that is referenced in the shared statements, but the variable is\neither not declared in all of the case clauses or it is declared in\ninconsistent ways.If the variable isn\u2019t declared in all of the case clauses, then it won\u2019t\nhave a value if one of the clauses that doesn\u2019t declare the variable is\nthe one that matches and executes the body. This includes the situation\nwhere one of the case clauses is the default clause.If the variable is declared in inconsistent ways, either being final in\nsome cases and not final in others or having a different type in\ndifferent cases, then the semantics of what the type or finality of the\nvariable should be are not defined.\n @see https://dart.dev/tools/diagnostic-messages#invalid_pattern_variable_in_shared_case_scope",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_return_type_for_catch_error",
        "name": "Invalid return type for catch error",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an invocation of\nFuture.catchError has an argument whose return type isn\u2019t compatible with\nthe type returned by the instance of Future. At runtime, the method\ncatchError attempts to return the value from the callback as the result\nof the future, which results in another exception being thrown.\n @see https://dart.dev/tools/diagnostic-messages#invalid_return_type_for_catch_error",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_super_formal_parameter_location",
        "name": "Invalid super formal parameter location",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a super parameter is used\nanywhere other than a non-redirecting generative constructor.\n @see https://dart.dev/tools/diagnostic-messages#invalid_super_formal_parameter_location",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invalid_type_argument_in_const_literal",
        "name": "Invalid type argument in const literal",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a type parameter is used as a\ntype argument in a list, map, or set literal that is prefixed by const.\nThis isn\u2019t allowed because the value of the type parameter (the actual type\nthat will be used at runtime) can\u2019t be known at compile time.\n @see https://dart.dev/tools/diagnostic-messages#invalid_type_argument_in_const_literal",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "invocation_of_non_function_expression",
        "name": "Invocation of non function expression",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a function invocation is found,\nbut the name being referenced isn\u2019t the name of a function, or when the\nexpression computing the function doesn\u2019t compute a function.\n @see https://dart.dev/tools/diagnostic-messages#invocation_of_non_function_expression",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "missing_default_value_for_parameter",
        "name": "Missing default value for parameter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an optional parameter, whether\npositional or named, has a potentially non-nullable type and doesn\u2019t\nspecify a default value. Optional parameters that have no explicit default\nvalue have an implicit default value of null. If the type of the\nparameter doesn\u2019t allow the parameter to have a value of null, then the\nimplicit default value isn\u2019t valid.\n @see https://dart.dev/tools/diagnostic-messages#missing_default_value_for_parameter",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "non_constant_map_element",
        "name": "Non constant map element",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an if element or a spread\nelement in a constant map isn\u2019t a constant element.\n @see https://dart.dev/tools/diagnostic-messages#non_constant_map_element",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "not_assigned_potentially_non_nullable_local_variable",
        "name": "Not assigned potentially non nullable local variable",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a local variable is referenced\nand has all these characteristics:\n @see https://dart.dev/tools/diagnostic-messages#not_assigned_potentially_non_nullable_local_variable",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "not_initialized_non_nullable_instance_field",
        "name": "Not initialized non nullable instance field",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field is declared and has all\nthese characteristics:\n @see https://dart.dev/tools/diagnostic-messages#not_initialized_non_nullable_instance_field",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "not_initialized_non_nullable_variable",
        "name": "Not initialized non nullable variable",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a static field or top-level\nvariable has a type that\u2019s non-nullable and doesn\u2019t have an initializer.\nFields and variables that don\u2019t have an initializer are normally\ninitialized to null, but the type of the field or variable doesn\u2019t allow\nit to be set to null, so an explicit initializer must be provided.\n @see https://dart.dev/tools/diagnostic-messages#not_initialized_non_nullable_variable",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "recursive_constructor_redirect",
        "name": "Recursive constructor redirect",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a constructor redirects to\nitself, either directly or indirectly, creating an infinite loop.\n @see https://dart.dev/tools/diagnostic-messages#recursive_constructor_redirect",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "redirect_to_invalid_function_type",
        "name": "Redirect to invalid function type",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a factory constructor attempts\nto redirect to another constructor, but the two have incompatible\nparameters. The parameters are compatible if all of the parameters of the\nredirecting constructor can be passed to the other constructor and if the\nother constructor doesn\u2019t require any parameters that aren\u2019t declared by\nthe redirecting constructor.\n @see https://dart.dev/tools/diagnostic-messages#redirect_to_invalid_function_type",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "return_in_generator",
        "name": "Return in generator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a generator function (one whose\nbody is marked with either async* or sync*) uses either a return\nstatement to return a value or implicitly returns a value because of using\n=>. In any of these cases, they should use yield instead of return.\n @see https://dart.dev/tools/diagnostic-messages#return_in_generator",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "subtype_of_disallowed_type",
        "name": "Subtype of disallowed type",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when one of the restricted classes is\nused in either an extends, implements, with, or on clause. The\nclasses bool, double, FutureOr, int, Null, num, and String\nare all restricted in this way, to allow for more efficient\nimplementations.\n @see https://dart.dev/tools/diagnostic-messages#subtype_of_disallowed_type",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "super_formal_parameter_without_associated_positional",
        "name": "Super formal parameter without associated positional",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when there\u2019s a positional super\nparameter in a constructor and the implicitly or explicitly invoked super\nconstructor doesn\u2019t have a positional parameter at the corresponding\nindex.Positional super parameters are associated with positional parameters in\nthe super constructor by their index. That is, the first super parameter\nis associated with the first positional parameter in the super\nconstructor, the second with the second, and so on.\n @see https://dart.dev/tools/diagnostic-messages#super_formal_parameter_without_associated_positional",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "type_check_with_null",
        "name": "Type check with null",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when there\u2019s a type check (using the\nas operator) where the type is Null. There\u2019s only one value whose type\nis Null, so the code is both more readable and more performant when it\ntests for null explicitly.\n @see https://dart.dev/tools/diagnostic-messages#type_check_with_null",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "type_parameter_supertype_of_its_bound",
        "name": "Type parameter supertype of its bound",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the bound of a type parameter\n(the type following the extends keyword) is either directly or indirectly\nthe type parameter itself. Stating that the type parameter must be the same\nas itself or a subtype of itself or a subtype of itself isn\u2019t helpful\nbecause it will always be the same as itself.\n @see https://dart.dev/tools/diagnostic-messages#type_parameter_supertype_of_its_bound",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "undefined_constructor_in_initializer",
        "name": "Undefined constructor in initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a superclass constructor is\ninvoked in the initializer list of a constructor, but the superclass\ndoesn\u2019t define the constructor being invoked.\n @see https://dart.dev/tools/diagnostic-messages#undefined_constructor_in_initializer",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "undefined_enum_constructor",
        "name": "Undefined enum constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the constructor invoked to\ninitialize an enum constant doesn\u2019t exist.\n @see https://dart.dev/tools/diagnostic-messages#undefined_enum_constructor",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "undefined_extension_getter",
        "name": "Undefined extension getter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to\ninvoke a getter, but the getter isn\u2019t defined by the specified extension.\nThe analyzer also produces this diagnostic when a static getter is\nreferenced but isn\u2019t defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_getter",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "undefined_extension_method",
        "name": "Undefined extension method",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to\ninvoke a method, but the method isn\u2019t defined by the specified extension.\nThe analyzer also produces this diagnostic when a static method is\nreferenced but isn\u2019t defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_method",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "undefined_extension_setter",
        "name": "Undefined extension setter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to\ninvoke a setter, but the setter isn\u2019t defined by the specified extension.\nThe analyzer also produces this diagnostic when a static setter is\nreferenced but isn\u2019t defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_setter",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "undefined_super_member",
        "name": "Undefined super member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an inherited member (method,\ngetter, setter, or operator) is referenced using super, but there\u2019s no\nmember with that name in the superclass chain.\n @see https://dart.dev/tools/diagnostic-messages#undefined_super_member",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "unnecessary_final",
        "name": "Unnecessary final",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a field initializing\nparameter or a super parameter in a constructor has the keyword final.\nIn both cases the keyword is unnecessary because the parameter is\nimplicitly final.\n @see https://dart.dev/tools/diagnostic-messages#unnecessary_final",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "unnecessary_null_comparison",
        "name": "Unnecessary null comparison",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when it finds an equality comparison\n(either == or !=) with one operand of null and the other operand\ncan\u2019t be null. Such comparisons are always either true or false, so\nthey serve no purpose.\n @see https://dart.dev/tools/diagnostic-messages#unnecessary_null_comparison",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "wrong_number_of_parameters_for_setter",
        "name": "Wrong number of parameters for setter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a setter is found that doesn\u2019t\ndeclare exactly one required positional parameter.\n @see https://dart.dev/tools/diagnostic-messages#wrong_number_of_parameters_for_setter",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "wrong_number_of_type_arguments",
        "name": "Wrong number of type arguments",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a type that has type parameters\nis used and type arguments are provided, but the number of type arguments\nisn\u2019t the same as the number of type parameters.The analyzer also produces this diagnostic when a constructor is invoked\nand the number of type arguments doesn\u2019t match the number of type\nparameters declared for the class.\n @see https://dart.dev/tools/diagnostic-messages#wrong_number_of_type_arguments",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "yield_in_non_generator",
        "name": "Yield in non generator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a yield or yield* statement\nappears in a function whose body isn\u2019t marked with one of the async* or\nsync* modifiers.\n @see https://dart.dev/tools/diagnostic-messages#yield_in_non_generator",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "always_use_package_imports",
        "name": "Always use package imports",
        "severity": "MINOR",
        "description": "Avoid relative imports for files in lib/.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_dynamic_calls",
        "name": "Avoid dynamic calls",
        "severity": "MAJOR",
        "description": "Avoid method calls or property accesses on a \"dynamic\" target.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_empty_else",
        "name": "Avoid empty else",
        "severity": "MAJOR",
        "description": "Avoid empty else statements.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_print",
        "name": "Avoid print",
        "severity": "MAJOR",
        "description": "Avoid print calls in production code.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_relative_lib_imports",
        "name": "Avoid relative lib imports",
        "severity": "MINOR",
        "description": "Avoid relative imports for files in lib/.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_returning_null_for_future (deprecated)",
        "name": "Avoid returning null for future (deprecated)",
        "severity": "MAJOR",
        "description": "Avoid returning null for Future.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_slow_async_io",
        "name": "Avoid slow async io",
        "severity": "MAJOR",
        "description": "Avoid slow async dart:io methods.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_type_to_string",
        "name": "Avoid type to string",
        "severity": "MAJOR",
        "description": "Avoid .toString() in production code since results may be minified.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_types_as_parameter_names",
        "name": "Avoid types as parameter names",
        "severity": "MAJOR",
        "description": "Avoid types as parameter names.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_web_libraries_in_flutter",
        "name": "Avoid web libraries in flutter",
        "severity": "CRITICAL",
        "description": "Avoid using web-only libraries outside Flutter web plugin packages.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "cancel_subscriptions",
        "name": "Cancel subscriptions",
        "severity": "CRITICAL",
        "description": "Cancel instances of dart.async.StreamSubscription.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "close_sinks",
        "name": "Close sinks",
        "severity": "CRITICAL",
        "description": "Close instances of dart.core.Sink.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "collection_methods_unrelated_type",
        "name": "Collection methods unrelated type",
        "severity": "CRITICAL",
        "description": "Invocation of various collection methods with arguments of unrelated types.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "comment_references",
        "name": "Comment references",
        "severity": "MINOR",
        "description": "Only reference in scope identifiers in doc comments.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "control_flow_in_finally",
        "name": "Control flow in finally",
        "severity": "MAJOR",
        "description": "Avoid control flow in finally blocks.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "deprecated_member_use_from_same_package",
        "name": "Deprecated member use from same package",
        "severity": "MINOR",
        "description": "Avoid using deprecated elements from within the package in which they are declared.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "diagnostic_describe_all_properties",
        "name": "Diagnostic describe all properties",
        "severity": "MAJOR",
        "description": "DO reference all public properties in debug methods.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "discarded_futures",
        "name": "Discarded futures",
        "severity": "MAJOR",
        "description": "Don't invoke asynchronous functions in non-async blocks.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "empty_statements",
        "name": "Empty statements",
        "severity": "CRITICAL",
        "description": "Avoid empty statements.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "hash_and_equals",
        "name": "Hash and equals",
        "severity": "CRITICAL",
        "description": "Always override hashCode if overriding ==.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "implicit_reopen (experimental)",
        "name": "Implicit reopen (experimental)",
        "severity": "MAJOR",
        "description": "Don't implicitly reopen classes.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "invalid_case_patterns (experimental)",
        "name": "Invalid case patterns (experimental)",
        "severity": "CRITICAL",
        "description": "Use case expressions that are valid in Dart 3.0.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "invariant_booleans",
        "name": "Invariant booleans",
        "severity": "MAJOR",
        "description": "Conditions should not unconditionally evaluate to true or to false.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "iterable_contains_unrelated_type",
        "name": "Iterable contains unrelated type",
        "severity": "MAJOR",
        "description": "Invocation of Iterable.contains with references of unrelated types.",
        "type": "BUG",
        "debt": "1min"
    },
    {
        "key": "list_remove_unrelated_type",
        "name": "List remove unrelated type",
        "severity": "MAJOR",
        "description": "Invocation of remove with references of unrelated types.",
        "type": "BUG",
        "debt": "1min"
    },
    {
        "key": "literal_only_boolean_expressions",
        "name": "Literal only boolean expressions",
        "severity": "MAJOR",
        "description": "Boolean expression composed only with literals.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "no_adjacent_strings_in_list",
        "name": "No adjacent strings in list",
        "severity": "MAJOR",
        "description": "Don't use adjacent strings in list.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "no_duplicate_case_values",
        "name": "No duplicate case values",
        "severity": "CRITICAL",
        "description": "Don't use more than one case with same value.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "no_logic_in_create_state",
        "name": "No logic in create state",
        "severity": "MAJOR",
        "description": "Don't put any logic in createState.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "prefer_relative_imports",
        "name": "Prefer relative imports",
        "severity": "MINOR",
        "description": "Prefer relative imports for files in lib/.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "prefer_void_to_null",
        "name": "Prefer void to null",
        "severity": "MAJOR",
        "description": "Don't use the Null type, unless you are positive that you don't want void.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "test_types_in_equals",
        "name": "Test types in equals",
        "severity": "CRITICAL",
        "description": "Test type arguments in operator ==(Object other).",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "throw_in_finally",
        "name": "Throw in finally",
        "severity": "MAJOR",
        "description": "Avoid throw in finally block.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "unnecessary_statements",
        "name": "Unnecessary statements",
        "severity": "MINOR",
        "description": "Avoid using unnecessary statements.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "unrelated_type_equality_checks",
        "name": "Unrelated type equality checks",
        "severity": "CRITICAL",
        "description": "Equality operator == invocation with references of unrelated types.",
        "type": "BUG",
        "debt": "1min"
    },
    {
        "key": "unsafe_html",
        "name": "Unsafe html",
        "severity": "CRITICAL",
        "description": "Avoid unsafe HTML APIs.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "use_build_context_synchronously (experimental)",
        "name": "Use build context synchronously (experimental)",
        "severity": "CRITICAL",
        "description": "Do not use BuildContexts across async gaps.",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "use_key_in_widget_constructors",
        "name": "Use key in widget constructors",
        "severity": "MAJOR",
        "description": "Use key in widget constructors.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "always_declare_return_types",
        "name": "Always declare return types",
        "severity": "MAJOR",
        "description": "Declare method return types.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "always_put_control_body_on_new_line",
        "name": "Always put control body on new line",
        "severity": "MINOR",
        "description": "Separate the control structure expression from its statement.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "always_put_required_named_parameters_first",
        "name": "Always put required named parameters first",
        "severity": "MINOR",
        "description": "Put required named parameters first.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "always_specify_types",
        "name": "Always specify types",
        "severity": "MAJOR",
        "description": "Specify type annotations.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "annotate_overrides",
        "name": "Annotate overrides",
        "severity": "MAJOR",
        "description": "Annotate overridden members.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_annotating_with_dynamic",
        "name": "Avoid annotating with dynamic",
        "severity": "MINOR",
        "description": "Avoid annotating with dynamic when not required.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_as",
        "name": "Avoid as",
        "severity": "MINOR",
        "description": "Avoid using as.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_bool_literals_in_conditional_expressions",
        "name": "Avoid bool literals in conditional expressions",
        "severity": "MINOR",
        "description": "Avoid bool literals in conditional expressions.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_catches_without_on_clauses",
        "name": "Avoid catches without on clauses",
        "severity": "MAJOR",
        "description": "Avoid catches without on clauses.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_catching_errors",
        "name": "Avoid catching errors",
        "severity": "MAJOR",
        "description": "Don't explicitly catch Error or types that implement it.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_classes_with_only_static_members",
        "name": "Avoid classes with only static members",
        "severity": "MINOR",
        "description": "Avoid defining a class that contains only static members.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_double_and_int_checks",
        "name": "Avoid double and int checks",
        "severity": "MAJOR",
        "description": "Avoid double and int checks.",
        "type": "BUG",
        "debt": "1min"
    },
    {
        "key": "avoid_equals_and_hash_code_on_mutable_classes",
        "name": "Avoid equals and hash code on mutable classes",
        "severity": "MAJOR",
        "description": "Avoid overloading operator == and hashCode on classes not marked @immutable.",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "avoid_escaping_inner_quotes",
        "name": "Avoid escaping inner quotes",
        "severity": "MINOR",
        "description": "Avoid escaping inner quotes by converting surrounding quotes.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_field_initializers_in_const_classes",
        "name": "Avoid field initializers in const classes",
        "severity": "MINOR",
        "description": "Avoid field initializers in const classes.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_final_parameters",
        "name": "Avoid final parameters",
        "severity": "MINOR",
        "description": "Avoid final for parameter declarations.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_function_literals_in_foreach_calls",
        "name": "Avoid function literals in foreach calls",
        "severity": "MINOR",
        "description": "Avoid using forEach with a function literal.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_implementing_value_types",
        "name": "Avoid implementing value types",
        "severity": "MAJOR",
        "description": "Don't implement classes that override ==.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_init_to_null",
        "name": "Avoid init to null",
        "severity": "MINOR",
        "description": "Don't explicitly initialize variables to null.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_js_rounded_ints",
        "name": "Avoid js rounded ints",
        "severity": "MAJOR",
        "description": "Avoid JavaScript rounded ints.",
        "type": "BUG",
        "debt": "5min"
    },
    {
        "key": "avoid_multiple_declarations_per_line",
        "name": "Avoid multiple declarations per line",
        "severity": "MINOR",
        "description": "Don't declare multiple variables on a single line.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_null_checks_in_equality_operators",
        "name": "Avoid null checks in equality operators",
        "severity": "MINOR",
        "description": "Don't check for null in custom == operators.",
        "type": "CODE_SMELL",
        "debt": "1min"
    },
    {
        "key": "avoid_positional_boolean_parameters",
        "name": "Avoid positional boolean parameters",
        "severity": "MINOR",
        "description": "Avoid positional boolean parameters.",
        "type": "CODE_SMELL",
        "debt": "5min"
    },
    {
        "key": "avoid_private_typedef_functions",
        "name": "Avoid private typedef functions",
        "description": "Avoid private typedef functions."
    },
    {
        "key": "avoid_redundant_argument_values",
        "name": "Avoid redundant argument values",
        "description": "Avoid redundant argument values."
    },
    {
        "key": "avoid_renaming_method_parameters",
        "name": "Avoid renaming method parameters",
        "description": "Don't rename parameters of overridden methods."
    },
    {
        "key": "avoid_return_types_on_setters",
        "name": "Avoid return types on setters",
        "description": "Avoid return types on setters."
    },
    {
        "key": "avoid_returning_null (deprecated)",
        "name": "Avoid returning null (deprecated)",
        "description": "Avoid returning null from members whose return type is bool, double, int, or num."
    },
    {
        "key": "avoid_returning_null_for_void",
        "name": "Avoid returning null for void",
        "description": "Avoid returning null for void."
    },
    {
        "key": "avoid_returning_this",
        "name": "Avoid returning this",
        "description": "Avoid returning this from methods just to enable a fluent interface."
    },
    {
        "key": "avoid_setters_without_getters",
        "name": "Avoid setters without getters",
        "description": "Avoid setters without getters."
    },
    {
        "key": "avoid_shadowing_type_parameters",
        "name": "Avoid shadowing type parameters",
        "description": "Avoid shadowing type parameters."
    },
    {
        "key": "avoid_single_cascade_in_expression_statements",
        "name": "Avoid single cascade in expression statements",
        "description": "Avoid single cascade in expression statements."
    },
    {
        "key": "avoid_types_on_closure_parameters",
        "name": "Avoid types on closure parameters",
        "description": "Avoid annotating types for function expression parameters."
    },
    {
        "key": "avoid_unnecessary_containers",
        "name": "Avoid unnecessary containers",
        "description": "Avoid unnecessary containers."
    },
    {
        "key": "avoid_unused_constructor_parameters",
        "name": "Avoid unused constructor parameters",
        "description": "Avoid defining unused parameters in constructors."
    },
    {
        "key": "avoid_void_async",
        "name": "Avoid void async",
        "description": "Avoid async functions that return void."
    },
    {
        "key": "await_only_futures",
        "name": "Await only futures",
        "description": "Await only futures."
    },
    {
        "key": "camel_case_extensions",
        "name": "Camel case extensions",
        "description": "Name extensions using UpperCamelCase."
    },
    {
        "key": "camel_case_types",
        "name": "Camel case types",
        "description": "Name types using UpperCamelCase."
    },
    {
        "key": "cascade_invocations",
        "name": "Cascade invocations",
        "description": "Cascade consecutive method invocations on the same reference."
    },
    {
        "key": "cast_nullable_to_non_nullable",
        "name": "Cast nullable to non nullable",
        "description": "Don't cast a nullable value to a non nullable type."
    },
    {
        "key": "combinators_ordering",
        "name": "Combinators ordering",
        "description": "Sort combinator names alphabetically."
    },
    {
        "key": "conditional_uri_does_not_exist",
        "name": "Conditional uri does not exist",
        "description": "Missing conditional import."
    },
    {
        "key": "constant_identifier_names",
        "name": "Constant identifier names",
        "description": "Prefer using lowerCamelCase for constant names."
    },
    {
        "key": "curly_braces_in_flow_control_structures",
        "name": "Curly braces in flow control structures",
        "description": "DO use curly braces for all flow control structures."
    },
    {
        "key": "dangling_library_doc_comments",
        "name": "Dangling library doc comments",
        "description": "Attach library doc comments to library directives."
    },
    {
        "key": "deprecated_consistency",
        "name": "Deprecated consistency",
        "description": "Missing deprecated annotation."
    },
    {
        "key": "directives_ordering",
        "name": "Directives ordering",
        "description": "Adhere to Effective Dart Guide directives sorting conventions."
    },
    {
        "key": "do_not_use_environment",
        "name": "Do not use environment",
        "description": "Do not use environment declared variables."
    },
    {
        "key": "empty_catches",
        "name": "Empty catches",
        "description": "Avoid empty catch blocks."
    },
    {
        "key": "empty_constructor_bodies",
        "name": "Empty constructor bodies",
        "description": "Use ; instead of {} for empty constructor bodies."
    },
    {
        "key": "enable_null_safety",
        "name": "Enable null safety",
        "description": "Do use sound null safety."
    },
    {
        "key": "eol_at_end_of_file",
        "name": "Eol at end of file",
        "description": "Put a single newline at end of file."
    },
    {
        "key": "exhaustive_cases",
        "name": "Exhaustive cases",
        "description": "Define case clauses for all constants in enum-like classes."
    },
    {
        "key": "file_names",
        "name": "File names",
        "description": "Name source files using lowercase_with_underscores."
    },
    {
        "key": "flutter_style_todos",
        "name": "Flutter style todos",
        "description": "Use Flutter TODO format: // TODO(username): message, https://URL-to-issue."
    },
    {
        "key": "implementation_imports",
        "name": "Implementation imports",
        "description": "Don't import implementation files from another package."
    },
    {
        "key": "implicit_call_tearoffs",
        "name": "Implicit call tearoffs",
        "description": "Explicitly tear-off call methods when using an object as a Function."
    },
    {
        "key": "join_return_with_assignment",
        "name": "Join return with assignment",
        "description": "Join return statement with assignment when possible."
    },
    {
        "key": "leading_newlines_in_multiline_strings",
        "name": "Leading newlines in multiline strings",
        "description": "Start multiline strings with a newline."
    },
    {
        "key": "library_annotations",
        "name": "Library annotations",
        "description": "Attach library annotations to library directives."
    },
    {
        "key": "library_names",
        "name": "Library names",
        "description": "Name libraries using lowercase_with_underscores."
    },
    {
        "key": "library_prefixes",
        "name": "Library prefixes",
        "description": "Use lowercase_with_underscores when specifying a library prefix."
    },
    {
        "key": "library_private_types_in_public_api",
        "name": "Library private types in public api",
        "description": "Avoid using private types in public APIs."
    },
    {
        "key": "lines_longer_than_80_chars",
        "name": "Lines longer than 80 chars",
        "description": "Avoid lines longer than 80 characters."
    },
    {
        "key": "matching_super_parameters",
        "name": "Matching super parameters",
        "description": "Use matching super parameter names."
    },
    {
        "key": "missing_whitespace_between_adjacent_strings",
        "name": "Missing whitespace between adjacent strings",
        "description": "Missing whitespace between adjacent strings."
    },
    {
        "key": "no_default_cases (experimental)",
        "name": "No default cases (experimental)",
        "description": "No default cases."
    },
    {
        "key": "no_leading_underscores_for_library_prefixes",
        "name": "No leading underscores for library prefixes",
        "description": "Avoid leading underscores for library prefixes."
    },
    {
        "key": "no_leading_underscores_for_local_identifiers",
        "name": "No leading underscores for local identifiers",
        "description": "Avoid leading underscores for local identifiers."
    },
    {
        "key": "no_literal_bool_comparisons",
        "name": "No literal bool comparisons",
        "description": "Don't compare booleans to boolean literals."
    },
    {
        "key": "no_runtimeType_toString",
        "name": "No runtimeType toString",
        "description": "Avoid calling toString() on runtimeType."
    },
    {
        "key": "non_constant_identifier_names",
        "name": "Non constant identifier names",
        "description": "Name non-constant identifiers using lowerCamelCase."
    },
    {
        "key": "noop_primitive_operations",
        "name": "Noop primitive operations",
        "description": "Noop primitive operations."
    },
    {
        "key": "null_check_on_nullable_type_parameter",
        "name": "Null check on nullable type parameter",
        "description": "Don't use null check on a potentially nullable type parameter."
    },
    {
        "key": "null_closures",
        "name": "Null closures",
        "description": "Do not pass null as an argument where a closure is expected."
    },
    {
        "key": "omit_local_variable_types",
        "name": "Omit local variable types",
        "description": "Omit type annotations for local variables."
    },
    {
        "key": "one_member_abstracts",
        "name": "One member abstracts",
        "description": "Avoid defining a one-member abstract class when a simple function will do."
    },
    {
        "key": "only_throw_errors",
        "name": "Only throw errors",
        "description": "Only throw instances of classes extending either Exception or Error."
    },
    {
        "key": "overridden_fields",
        "name": "Overridden fields",
        "description": "Don't override fields."
    },
    {
        "key": "package_api_docs",
        "name": "Package api docs",
        "description": "Provide doc comments for all public APIs."
    },
    {
        "key": "package_prefixed_library_names",
        "name": "Package prefixed library names",
        "description": "Prefix library names with the package name and a dot-separated path."
    },
    {
        "key": "parameter_assignments",
        "name": "Parameter assignments",
        "description": "Don't reassign references to parameters of functions or methods."
    },
    {
        "key": "prefer_adjacent_string_concatenation",
        "name": "Prefer adjacent string concatenation",
        "description": "Use adjacent strings to concatenate string literals."
    },
    {
        "key": "prefer_asserts_in_initializer_lists",
        "name": "Prefer asserts in initializer lists",
        "description": "Prefer putting asserts in initializer lists."
    },
    {
        "key": "prefer_asserts_with_message",
        "name": "Prefer asserts with message",
        "description": "Prefer asserts with message."
    },
    {
        "key": "prefer_bool_in_asserts",
        "name": "Prefer bool in asserts",
        "description": "Prefer using a boolean as the assert condition."
    },
    {
        "key": "prefer_collection_literals",
        "name": "Prefer collection literals",
        "description": "Use collection literals when possible."
    },
    {
        "key": "prefer_conditional_assignment",
        "name": "Prefer conditional assignment",
        "description": "Prefer using ??= over testing for null."
    },
    {
        "key": "prefer_const_constructors",
        "name": "Prefer const constructors",
        "description": "Prefer const with constant constructors."
    },
    {
        "key": "prefer_const_constructors_in_immutables",
        "name": "Prefer const constructors in immutables",
        "description": "Prefer declaring const constructors on @immutable classes."
    },
    {
        "key": "prefer_const_declarations",
        "name": "Prefer const declarations",
        "description": "Prefer const over final for declarations."
    },
    {
        "key": "prefer_const_literals_to_create_immutables",
        "name": "Prefer const literals to create immutables",
        "description": "Prefer const literals as parameters of constructors on @immutable classes."
    },
    {
        "key": "prefer_constructors_over_static_methods",
        "name": "Prefer constructors over static methods",
        "description": "Prefer defining constructors instead of static methods to create instances."
    },
    {
        "key": "prefer_contains",
        "name": "Prefer contains",
        "description": "Use contains for List and String instances."
    },
    {
        "key": "prefer_double_quotes",
        "name": "Prefer double quotes",
        "description": "Prefer double quotes where they won't require escape sequences."
    },
    {
        "key": "prefer_equal_for_default_values",
        "name": "Prefer equal for default values",
        "description": "Use = to separate a named parameter from its default value."
    },
    {
        "key": "prefer_expression_function_bodies",
        "name": "Prefer expression function bodies",
        "description": "Use => for short members whose body is a single return statement."
    },
    {
        "key": "prefer_final_fields",
        "name": "Prefer final fields",
        "description": "Private field could be final."
    },
    {
        "key": "prefer_final_in_for_each",
        "name": "Prefer final in for each",
        "description": "Prefer final in for-each loop variable if reference is not reassigned."
    },
    {
        "key": "prefer_final_locals",
        "name": "Prefer final locals",
        "description": "Prefer final for variable declarations if they are not reassigned."
    },
    {
        "key": "prefer_final_parameters",
        "name": "Prefer final parameters",
        "description": "Prefer final for parameter declarations if they are not reassigned."
    },
    {
        "key": "prefer_for_elements_to_map_fromIterable",
        "name": "Prefer for elements to map fromIterable",
        "description": "Prefer 'for' elements when building maps from iterables."
    },
    {
        "key": "prefer_foreach",
        "name": "Prefer foreach",
        "description": "Use forEach to only apply a function to all the elements."
    },
    {
        "key": "prefer_function_declarations_over_variables",
        "name": "Prefer function declarations over variables",
        "description": "Use a function declaration to bind a function to a name."
    },
    {
        "key": "prefer_generic_function_type_aliases",
        "name": "Prefer generic function type aliases",
        "description": "Prefer generic function type aliases."
    },
    {
        "key": "prefer_if_elements_to_conditional_expressions",
        "name": "Prefer if elements to conditional expressions",
        "description": "Prefer if elements to conditional expressions where possible."
    },
    {
        "key": "prefer_if_null_operators",
        "name": "Prefer if null operators",
        "description": "Prefer using if null operators."
    },
    {
        "key": "prefer_initializing_formals",
        "name": "Prefer initializing formals",
        "description": "Use initializing formals when possible."
    },
    {
        "key": "prefer_inlined_adds",
        "name": "Prefer inlined adds",
        "description": "Inline list item declarations where possible."
    },
    {
        "key": "prefer_int_literals",
        "name": "Prefer int literals",
        "description": "Prefer int literals over double literals."
    },
    {
        "key": "prefer_interpolation_to_compose_strings",
        "name": "Prefer interpolation to compose strings",
        "description": "Use interpolation to compose strings and values."
    },
    {
        "key": "prefer_is_empty",
        "name": "Prefer is empty",
        "description": "Use isEmpty for Iterables and Maps."
    },
    {
        "key": "prefer_is_not_empty",
        "name": "Prefer is not empty",
        "description": "Use isNotEmpty for Iterables and Maps."
    },
    {
        "key": "prefer_is_not_operator",
        "name": "Prefer is not operator",
        "description": "Prefer is! operator."
    },
    {
        "key": "prefer_iterable_whereType",
        "name": "Prefer iterable whereType",
        "description": "Prefer to use whereType on iterable."
    },
    {
        "key": "prefer_mixin",
        "name": "Prefer mixin",
        "description": "Prefer using mixins."
    },
    {
        "key": "prefer_null_aware_method_calls",
        "name": "Prefer null aware method calls",
        "description": "Prefer null aware method calls."
    },
    {
        "key": "prefer_null_aware_operators",
        "name": "Prefer null aware operators",
        "description": "Prefer using null aware operators."
    },
    {
        "key": "prefer_single_quotes",
        "name": "Prefer single quotes",
        "description": "Only use double quotes for strings containing single quotes."
    },
    {
        "key": "prefer_spread_collections",
        "name": "Prefer spread collections",
        "description": "Use spread collections when possible."
    },
    {
        "key": "prefer_typing_uninitialized_variables",
        "name": "Prefer typing uninitialized variables",
        "description": "Prefer typing uninitialized variables and fields."
    },
    {
        "key": "provide_deprecation_message",
        "name": "Provide deprecation message",
        "description": "Provide a deprecation message, via @Deprecated(\"message\")."
    },
    {
        "key": "public_member_api_docs",
        "name": "Public member api docs",
        "description": "Document all public members."
    },
    {
        "key": "recursive_getters",
        "name": "Recursive getters",
        "description": "Property getter recursively returns itself."
    },
    {
        "key": "require_trailing_commas",
        "name": "Require trailing commas",
        "description": "Use trailing commas for all function calls and declarations."
    },
    {
        "key": "sized_box_for_whitespace",
        "name": "Sized box for whitespace",
        "description": "SizedBox for whitespace."
    },
    {
        "key": "sized_box_shrink_expand",
        "name": "Sized box shrink expand",
        "description": "Use SizedBox shrink and expand named constructors."
    },
    {
        "key": "slash_for_doc_comments",
        "name": "Slash for doc comments",
        "description": "Prefer using /// for doc comments."
    },
    {
        "key": "sort_child_properties_last",
        "name": "Sort child properties last",
        "description": "Sort child properties last in widget instance creations."
    },
    {
        "key": "sort_constructors_first",
        "name": "Sort constructors first",
        "description": "Sort constructor declarations before other members."
    },
    {
        "key": "sort_unnamed_constructors_first",
        "name": "Sort unnamed constructors first",
        "description": "Sort unnamed constructor declarations first."
    },
    {
        "key": "super_goes_last",
        "name": "Super goes last",
        "description": "Place the super call last in a constructor initialization list."
    },
    {
        "key": "tighten_type_of_initializing_formals",
        "name": "Tighten type of initializing formals",
        "description": "Tighten type of initializing formal."
    },
    {
        "key": "type_annotate_public_apis",
        "name": "Type annotate public apis",
        "description": "Type annotate public APIs."
    },
    {
        "key": "type_init_formals",
        "name": "Type init formals",
        "description": "Don't type annotate initializing formals."
    },
    {
        "key": "type_literal_in_constant_pattern",
        "name": "Type literal in constant pattern",
        "description": "Don't use constant patterns with type literals."
    },
    {
        "key": "unawaited_futures",
        "name": "Unawaited futures",
        "description": "Future results in async function bodies must be awaited or marked unawaited using dart:async."
    },
    {
        "key": "unnecessary_await_in_return",
        "name": "Unnecessary await in return",
        "description": "Unnecessary await keyword in return."
    },
    {
        "key": "unnecessary_brace_in_string_interps",
        "name": "Unnecessary brace in string interps",
        "description": "Avoid using braces in interpolation when not needed."
    },
    {
        "key": "unnecessary_breaks",
        "name": "Unnecessary breaks",
        "description": "Don't use explicit breaks when a break is implied."
    },
    {
        "key": "unnecessary_const",
        "name": "Unnecessary const",
        "description": "Avoid const keyword."
    },
    {
        "key": "unnecessary_constructor_name",
        "name": "Unnecessary constructor name",
        "description": "Unnecessary .new constructor name."
    },
    {
        "key": "unnecessary_getters_setters",
        "name": "Unnecessary getters setters",
        "description": "Avoid wrapping fields in getters and setters just to be \"safe\"."
    },
    {
        "key": "unnecessary_lambdas",
        "name": "Unnecessary lambdas",
        "description": "Don't create a lambda when a tear-off will do."
    },
    {
        "key": "unnecessary_late",
        "name": "Unnecessary late",
        "description": "Don't specify the late modifier when it is not needed."
    },
    {
        "key": "unnecessary_library_directive",
        "name": "Unnecessary library directive",
        "description": "Avoid library directives unless they have documentation comments or annotations."
    },
    {
        "key": "unnecessary_new",
        "name": "Unnecessary new",
        "description": "Unnecessary new keyword."
    },
    {
        "key": "unnecessary_null_aware_assignments",
        "name": "Unnecessary null aware assignments",
        "description": "Avoid null in null-aware assignment."
    },
    {
        "key": "unnecessary_null_aware_operator_on_extension_on_nullable",
        "name": "Unnecessary null aware operator on extension on nullable",
        "description": "Unnecessary null aware operator on extension on a nullable type."
    },
    {
        "key": "unnecessary_null_checks (experimental)",
        "name": "Unnecessary null checks (experimental)",
        "description": "Unnecessary null checks."
    },
    {
        "key": "unnecessary_null_in_if_null_operators",
        "name": "Unnecessary null in if null operators",
        "description": "Avoid using null in if null operators."
    },
    {
        "key": "unnecessary_nullable_for_final_variable_declarations",
        "name": "Unnecessary nullable for final variable declarations",
        "description": "Use a non-nullable type for a final variable initialized with a non-nullable value."
    },
    {
        "key": "unnecessary_overrides",
        "name": "Unnecessary overrides",
        "description": "Don't override a method to do a super method invocation with the same parameters."
    },
    {
        "key": "unnecessary_parenthesis",
        "name": "Unnecessary parenthesis",
        "description": "Unnecessary parentheses can be removed."
    },
    {
        "key": "unnecessary_raw_strings",
        "name": "Unnecessary raw strings",
        "description": "Unnecessary raw string."
    },
    {
        "key": "unnecessary_string_escapes",
        "name": "Unnecessary string escapes",
        "description": "Remove unnecessary backslashes in strings."
    },
    {
        "key": "unnecessary_string_interpolations",
        "name": "Unnecessary string interpolations",
        "description": "Unnecessary string interpolation."
    },
    {
        "key": "unnecessary_this",
        "name": "Unnecessary this",
        "description": "Don't access members with this unless avoiding shadowing."
    },
    {
        "key": "unnecessary_to_list_in_spreads",
        "name": "Unnecessary to list in spreads",
        "description": "Unnecessary toList() in spreads."
    },
    {
        "key": "unreachable_from_main (experimental)",
        "name": "Unreachable from main (experimental)",
        "description": "Unreachable top-level members in executable libraries."
    },
    {
        "key": "use_colored_box",
        "name": "Use colored box",
        "description": "Use ColoredBox."
    },
    {
        "key": "use_decorated_box",
        "name": "Use decorated box",
        "description": "Use DecoratedBox."
    },
    {
        "key": "use_enums",
        "name": "Use enums",
        "description": "Use enums rather than classes that behave like enums."
    },
    {
        "key": "use_full_hex_values_for_flutter_colors",
        "name": "Use full hex values for flutter colors",
        "description": "Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color."
    },
    {
        "key": "use_function_type_syntax_for_parameters",
        "name": "Use function type syntax for parameters",
        "description": "Use generic function type syntax for parameters."
    },
    {
        "key": "use_if_null_to_convert_nulls_to_bools",
        "name": "Use if null to convert nulls to bools",
        "description": "Use if-null operators to convert nulls to bools."
    },
    {
        "key": "use_is_even_rather_than_modulo",
        "name": "Use is even rather than modulo",
        "description": "Prefer intValue.isOdd/isEven instead of checking the result of % 2."
    },
    {
        "key": "use_late_for_private_fields_and_variables (experimental)",
        "name": "Use late for private fields and variables (experimental)",
        "description": "Use late for private members with a non-nullable type."
    },
    {
        "key": "use_named_constants",
        "name": "Use named constants",
        "description": "Use predefined named constants."
    },
    {
        "key": "use_raw_strings",
        "name": "Use raw strings",
        "description": "Use raw string to avoid escapes."
    },
    {
        "key": "use_rethrow_when_possible",
        "name": "Use rethrow when possible",
        "description": "Use rethrow to rethrow a caught exception."
    },
    {
        "key": "use_setters_to_change_properties",
        "name": "Use setters to change properties",
        "description": "Use a setter for operations that conceptually change a property."
    },
    {
        "key": "use_string_buffers",
        "name": "Use string buffers",
        "description": "Use string buffers to compose strings."
    },
    {
        "key": "use_string_in_part_of_directives",
        "name": "Use string in part of directives",
        "description": "Use string in part of directives."
    },
    {
        "key": "use_super_parameters (experimental)",
        "name": "Use super parameters (experimental)",
        "description": "Use super-initializer parameters where possible."
    },
    {
        "key": "use_test_throws_matchers",
        "name": "Use test throws matchers",
        "description": "Use throwsA matcher instead of fail()."
    },
    {
        "key": "use_to_and_as_if_applicable",
        "name": "Use to and as if applicable",
        "description": "Start the name of the method with to/_to or as/_as if applicable."
    },
    {
        "key": "depend_on_referenced_packages",
        "name": "Depend on referenced packages",
        "description": "Depend on referenced packages."
    },
    {
        "key": "package_names",
        "name": "Package names",
        "description": "Use lowercase_with_underscores for package names."
    },
    {
        "key": "secure_pubspec_urls",
        "name": "Secure pubspec urls",
        "description": "Use secure urls in pubspec.yaml."
    }
]